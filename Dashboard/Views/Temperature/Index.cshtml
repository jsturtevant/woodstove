@model Dashboard.Models.DevicesViewModel

@{
    ViewBag.Title = "Temprature";
}

<div class="devices row">
    @foreach (var device in @Model.Devices)
    {
        if (device.Display)
        {
            <div class="col col-md-6 text-center">
                <div class="device" data-device-id="@device.Id">
                    <h1 class="">
                        @device.Name  <small>OutSide <br /> <span class="outsidetemp"></span></small>
                    </h1>
                    <div class="loading">
                        Loading<br />
                        <i class="fa fa-cog fa-spin"></i>
                    </div>


                    <div class="temprature-display hide">
                        <span class="temp">

                        </span>
                        <span class="roomtemp">

                        </span>

                        <br />

                        <canvas class="graph" width="400" height="100"></canvas>
                    </div>
                </div>
            </div>
        }

    }
</div>

@section scripts
{
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/smoothie.js"></script>

    <script>
        $(function () {

            // Declare a proxy to reference the hub.
            var tempHub = $.connection.tempHub;
            var devices = new Array();

            $.connection.hub.start().done(function () {
                $('.device').each(function () {

                    var $device = $(this);
                    var deviceId = $device.data('device-id');

                    tempHub.server.subscribeToDevice(deviceId);

                    var smoothie = new SmoothieChart({ maxValue: 100 });
                    smoothie.streamTo($device.find('.graph')[0]);

                    var deviceTemp = new TimeSeries();
                    smoothie.addTimeSeries(deviceTemp, { strokeStyle: 'rgb(0, 255, 0)', fillStyle: 'rgba(0, 255, 0, 0.4)', lineWidth: 3 });

                    var roomTemp = new TimeSeries();
                    smoothie.addTimeSeries(roomTemp, { strokeStyle: 'rgb(255, 0, 255)', fillStyle: 'rgba(255, 0, 255, 0.3)', lineWidth: 3 });

                    var outsideTemp = new TimeSeries();
                    smoothie.addTimeSeries(outsideTemp, { strokeStyle: 'rgb(0, 255, 255)', fillStyle: 'rgba(0, 255, 255, 0.3)', lineWidth: 3 });

                    devices[deviceId] = {
                        'device': $device,
                        'deviceTemp': deviceTemp,
                        'roomTemp': roomTemp,
                        'outsideTemp': outsideTemp
                    };
                });
            });

            tempHub.client.currentTemp = function (temp) {

                var deviceToUpdate = devices[temp.DeviceId];

                deviceToUpdate.device.find(".loading").addClass('hide');
                deviceToUpdate.device.find(".temprature-display").removeClass('hide');

                deviceToUpdate.device.find(".temp").html(temp.Value);
                deviceToUpdate.device.find(".roomtemp").html(temp.SecondaryValue);
                deviceToUpdate.device.find(".outsidetemp").html(temp.TemperatureOutside);

                var time = new Date().getTime();
                deviceToUpdate.deviceTemp.append(time, temp.Value);
                deviceToUpdate.roomTemp.append(time, temp.SecondaryValue);
                deviceToUpdate.outsideTemp.append(time, temp.TemperatureOutside);



            };


        });


    </script>
}